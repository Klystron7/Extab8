#!/usr/bin/perl -w -- 
#
# generated by wxGlade 0.9.0b2 on Mon Dec 24 12:27:58 2018
#
# To get wxPerl visit http://www.wxperl.it
#

use Wx qw[:allclasses];
use strict;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package MyFrame;

use Wx qw[:everything];
use base qw(Wx::Frame);
use Wx::Event qw(EVT_MENU);
use strict;
use Wx::Event qw(EVT_BUTTON);
use base 'Wx::App';

sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: MyFrame::new
    $style = wxDEFAULT_FRAME_STYLE
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->SetSize(Wx::Size->new(587, 402));
    $self->{checkbox_1004} = Wx::CheckBox->new($self, wxID_ANY, "");
    $self->{checkbox_1007} = Wx::CheckBox->new($self, wxID_ANY, "");
    $self->{checkbox_1025mfc} = Wx::CheckBox->new($self, wxID_ANY, "");
    $self->{checkbox_1025mfr} = Wx::CheckBox->new($self, wxID_ANY, "");
    $self->{checkbox_Dtcomp} = Wx::CheckBox->new($self, wxID_ANY, "");
    $self->{Open_file} = Wx::Button->new($self, wxID_ANY, "Open File");
    $self->{Exit} = Wx::Button->new($self, wxID_ANY, "Exit");
    $self->{text_ctrl_1} = Wx::TextCtrl->new($self, wxID_ANY, "");

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_1004}->GetId, $self->can('checkbox_1004'));
    Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_1007}->GetId, $self->can('checkbox_1007'));
    Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_1025mfc}->GetId, $self->can('checkbox_1025mfc'));
    Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_1025mfr}->GetId, $self->can('checkbox_1025mfr'));
    Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_Dtcomp}->GetId, $self->can('checkbox_Dtcomp'));
    Wx::Event::EVT_BUTTON($self, $self->{Open_file}->GetId, $self->can('Open_file'));
    Wx::Event::EVT_BUTTON($self, $self->{Exit}->GetId, $self->can('Exit'));

    # end wxGlade
    return $self;

}

sub __set_properties {
    my $self = shift;
    # begin wxGlade: MyFrame::__set_properties
    $self->SetTitle("frame");
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: MyFrame::__do_layout
    $self->{sizer_1} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{grid_sizer_1} = Wx::FlexGridSizer->new(1, 2, 0, 0);
    $self->{grid_sizer_3} = Wx::FlexGridSizer->new(2, 1, 0, 0);
    $self->{grid_sizer_2} = Wx::FlexGridSizer->new(7, 1, 0, 0);
    $self->{grid_sizer_6} = Wx::FlexGridSizer->new(1, 2, 0, 0);
    $self->{grid_sizer_4} = Wx::FlexGridSizer->new(5, 2, 0, 0);
    $self->{grid_sizer_2}->Add(20, 20, 0, wxEXPAND, 0);
    my $label_1 = Wx::StaticText->new($self, wxID_ANY, "Select Output Format:");
    $self->{grid_sizer_2}->Add($label_1, 1, wxALIGN_CENTER|wxALL, 5);
    my $static_line_1 = Wx::StaticLine->new($self, wxID_ANY);
    $self->{grid_sizer_2}->Add($static_line_1, 1, wxALL|wxEXPAND, 5);
    my $label_2 = Wx::StaticText->new($self, wxID_ANY, "1004 Comparable Grid");
    $self->{grid_sizer_4}->Add($label_2, 1, wxALIGN_RIGHT|wxALL, 5);
    $self->{grid_sizer_4}->Add($self->{checkbox_1004}, 1, wxALIGN_CENTER|wxALL|wxEXPAND, 5);
    my $label_4 = Wx::StaticText->new($self, wxID_ANY, "1007 Rent Comparable");
    $self->{grid_sizer_4}->Add($label_4, 1, wxALIGN_RIGHT|wxALL, 5);
    $self->{grid_sizer_4}->Add($self->{checkbox_1007}, 1, wxALIGN_CENTER|wxALL|wxEXPAND, 5);
    my $label_5 = Wx::StaticText->new($self, wxID_ANY, "1025 Multi-family Comp");
    $self->{grid_sizer_4}->Add($label_5, 1, wxALIGN_RIGHT|wxALL, 5);
    $self->{grid_sizer_4}->Add($self->{checkbox_1025mfc}, 1, wxALIGN_CENTER|wxALL|wxEXPAND, 5);
    my $label_6 = Wx::StaticText->new($self, wxID_ANY, "1025 Multi-family Rent");
    $self->{grid_sizer_4}->Add($label_6, 1, wxALIGN_RIGHT|wxALL, 5);
    $self->{grid_sizer_4}->Add($self->{checkbox_1025mfr}, 1, wxALIGN_CENTER|wxALL|wxEXPAND, 5);
    my $label_7 = Wx::StaticText->new($self, wxID_ANY, "Desktop Comp");
    $self->{grid_sizer_4}->Add($label_7, 1, wxALIGN_RIGHT|wxALL, 5);
    $self->{grid_sizer_4}->Add($self->{checkbox_Dtcomp}, 1, wxALIGN_CENTER|wxALL|wxEXPAND, 5);
    $self->{grid_sizer_4}->AddGrowableCol(0);
    $self->{grid_sizer_2}->Add($self->{grid_sizer_4}, 1, wxALL|wxEXPAND, 5);
    my $static_line_2 = Wx::StaticLine->new($self, wxID_ANY);
    $self->{grid_sizer_2}->Add($static_line_2, 1, wxALL|wxEXPAND, 5);
    $self->{grid_sizer_2}->Add(20, 10, 0, wxEXPAND, 0);
    $self->{grid_sizer_6}->Add($self->{Open_file}, 1, wxALL, 8);
    $self->{grid_sizer_6}->Add($self->{Exit}, 1, wxALL, 8);
    $self->{grid_sizer_6}->AddGrowableCol(0);
    $self->{grid_sizer_6}->AddGrowableCol(1);
    $self->{grid_sizer_2}->Add($self->{grid_sizer_6}, 1, wxALIGN_CENTER|wxALL|wxEXPAND, 0);
    $self->{grid_sizer_1}->Add($self->{grid_sizer_2}, 1, wxEXPAND, 0);
    my $label_3 = Wx::StaticText->new($self, wxID_ANY, "Status");
    $self->{grid_sizer_3}->Add($label_3, 1, wxALIGN_CENTER|wxALL, 5);
    $self->{grid_sizer_3}->Add($self->{text_ctrl_1}, 1, wxALL|wxEXPAND, 5);
    $self->{grid_sizer_3}->AddGrowableRow(1);
    $self->{grid_sizer_3}->AddGrowableRow(2);
    $self->{grid_sizer_3}->AddGrowableCol(0);
    $self->{grid_sizer_1}->Add($self->{grid_sizer_3}, 1, wxEXPAND, 0);
    $self->{grid_sizer_1}->AddGrowableRow(0);
    $self->{grid_sizer_1}->AddGrowableCol(1);
    $self->{sizer_1}->Add($self->{grid_sizer_1}, 1, wxEXPAND, 0);
    $self->SetSizer($self->{sizer_1});
    $self->Layout();
    # end wxGlade
}

sub checkbox_1004 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::checkbox_1004 <event_handler>
    warn "Event handler (checkbox_1004) not implemented";
    $event->Skip;
    # end wxGlade
}

sub checkbox_1007 {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::checkbox_1007 <event_handler>
    warn "Event handler (checkbox_1007) not implemented";
    $event->Skip;
    # end wxGlade
}

sub checkbox_1025mfc {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::checkbox_1025mfc <event_handler>
    warn "Event handler (checkbox_1025mfc) not implemented";
    $event->Skip;
    # end wxGlade
}

sub checkbox_1025mfr {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::checkbox_1025mfr <event_handler>
    warn "Event handler (checkbox_1025mfr) not implemented";
    $event->Skip;
    # end wxGlade
}

sub checkbox_Dtcomp {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::checkbox_Dtcomp <event_handler>
    warn "Event handler (checkbox_Dtcomp) not implemented";
    $event->Skip;
    # end wxGlade
}

sub Open_file {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::Open_file <event_handler>
    my $comp1004 = $self->{checkbox_1004}->GetValue;
    my $comp1007 = $self->{checkbox_1007}->GetValue;
    
    my $fileDialog = Wx::FileDialog->new($self, "Select MLS File", "", "", "", wxFD_OPEN);               
    my $fileDialogStatus = $fileDialog->ShowModal(); 
    
    
    #warn "Event handler (Open_file) not implemented";
    #$event->Skip;
    # end wxGlade
}

sub Exit {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::Exit <event_handler>
    $self->Destroy();
    
    #warn "Event handler (Exit) not implemented";
    #$event->Skip;
    # end wxGlade
}


# end of class MyFrame

1;

package MyApp;

use base qw(Wx::App);
use strict;

sub OnInit {
    my( $self ) = shift;

    Wx::InitAllImageHandlers();

    my $frame = MyFrame->new();

    $self->SetTopWindow($frame);
    $frame->Show(1);

    return 1;
}
# end of class MyApp

package main;
   
    #my $app = MyApp->new();
    #$app->MainLoop();
unless(caller){
    my $app = MyApp->new();
    $app->MainLoop();
}






